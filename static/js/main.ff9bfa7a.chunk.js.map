{"version":3,"sources":["App.js","index.js"],"names":["generateDeck","colors","deck","color","push","matched","sort","Math","random","initialState","flipped","turns","score","pendingReset","gameOver","gameReducer","state","action","type","length","includes","index","first","second","newMatched","isGameOver","App","dispatch","useReducer","useEffect","timer","setTimeout","clearTimeout","handlePlayAgain","React","createElement","className","map","card","key","style","--card-color","onClick","handleCardClick","Fragment","async","console","log","miniApps","miniApp","ready","setHeaderColor","error","initDataRaw","URLSearchParams","JSON","stringify","id","first_name","last_name","username","language_code","is_premium","allows_write_to_pm","toString","mockTelegramEnv","themeParams","accentTextColor","bgColor","buttonColor","buttonTextColor","destructiveTextColor","headerBgColor","hintColor","linkColor","secondaryBgColor","sectionBgColor","sectionHeaderTextColor","subtitleTextColor","textColor","initData","parseInitData","version","platform","initializeTelegramSDK","mainBtn","mainButton","setParams","backgroundColor","text","isVisible","isEnabled","show","on","localStorage","getItem","shareURL","container","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ff9bfa7a.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react';\nimport './App.css';\n\nconst generateDeck = () => {\n  const colors = ['#FF6347', '#4682B4', '#32CD32', '#FFD700', '#FF69B4', '#8A2BE2'];\n  const deck = [];\n  // Каждому цвету добавляем две карточки\n  for (let color of colors) {\n    deck.push({ color, matched: false });\n    deck.push({ color, matched: false });\n  }\n  // Перемешиваем колоду\n  return deck.sort(() => Math.random() - 0.5);\n};\n\nconst initialState = {\n  deck: generateDeck(),\n  flipped: [],\n  matched: [],\n  turns: 0,\n  score: 0,\n  pendingReset: false,\n  gameOver: false,\n};\n\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'FLIP_CARD':\n      // Переворачиваем карточку\n      if (state.flipped.length < 2 && !state.flipped.includes(action.index) && !state.matched.includes(state.deck[action.index].color)) {\n        return { ...state, flipped: [...state.flipped, action.index] };\n      }\n      return state;\n    case 'CHECK_MATCH':\n      // Проверяем совпадение перевернутых карточек\n      const [first, second] = state.flipped;\n      if (state.deck[first].color === state.deck[second].color) {\n        const newMatched = [...state.matched, state.deck[first].color];\n        const isGameOver = newMatched.length === state.deck.length / 2;\n        return {\n          ...state,\n          matched: newMatched,\n          score: isGameOver ? state.score + 1 : state.score,\n          flipped: [],\n          pendingReset: false,\n          gameOver: isGameOver,\n        };\n      } else {\n        return { ...state, pendingReset: true };\n      }\n    case 'RESET_FLIPPED':\n      // Сбрасываем перевернутые карточки\n      return { ...state, flipped: [], pendingReset: false };\n    case 'INCREMENT_TURN':\n      // Увеличиваем счетчик попыток\n      return { ...state, turns: state.turns + 1 };\n    case 'RESET_GAME':\n      // Сбрасываем состояние игры\n      return {\n        ...initialState,\n        deck: generateDeck(),\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // Проверка на совпадение перевернутых карточек\n  useEffect(() => {\n    if (state.flipped.length === 2) {\n      dispatch({ type: 'CHECK_MATCH' });\n      dispatch({ type: 'INCREMENT_TURN' });\n    }\n  }, [state.flipped]);\n\n  // Таймер для сброса перевернутых карточек\n  useEffect(() => {\n    if (state.pendingReset) {\n      const timer = setTimeout(() => {\n        dispatch({ type: 'RESET_FLIPPED' });\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [state.pendingReset]);\n\n  // Обработка клика на карточку\n  const handleCardClick = (index) => {\n    if (!state.gameOver && state.flipped.length < 2 && !state.flipped.includes(index)) {\n      dispatch({ type: 'FLIP_CARD', index });\n    }\n  };\n\n  const handlePlayAgain = () => {\n    dispatch({ type: 'RESET_GAME' });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"info\">\n        <p>Очки: {state.score}</p>\n        <p>Попытки: {state.turns}/15</p>\n      </div>\n      <div className=\"deck\">\n        {state.deck.map((card, index) => (\n          <div\n            key={index}\n            className={`card ${state.flipped.includes(index) || state.matched.includes(card.color) ? 'flipped show' : ''}`}\n            style={{ '--card-color': card.color }}\n            onClick={() => handleCardClick(index)}\n          />\n        ))}\n      </div>\n      {state.gameOver && (\n        <>\n          <div className=\"overlay\" />\n          <div className=\"game-over\">\n            <h2>Вы выиграли!</h2>\n            <button onClick={handlePlayAgain}>Заново</button>\n          </div>\n        </>\n      )}\n      {!state.gameOver && state.turns >= 15 && (\n        <>\n          <div className=\"overlay\" />\n          <div className=\"game-over\">\n            <h2>Игра окончена!</h2>\n            <button onClick={handlePlayAgain}>Заново</button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport { miniApp, mainButton, mockTelegramEnv, parseInitData, shareURL } from '@telegram-apps/sdk';\n\nconst initializeTelegramSDK = async () => {\n  try {\n    // Попытка инициализировать настоящее окружение Telegram\n    console.log(\"Инициализация окружения Telegram\");\n    const [miniApps] = miniApp();\n    await miniApps.ready();\n\n    miniApps.setHeaderColor('#fcb69f');\n  } catch (error) {\n    // В случае ошибки инициализируем фейковое окружение\n    console.error('Ошибка при инициализации Telegram:', error);\n\n    const initDataRaw = new URLSearchParams([\n      ['user', JSON.stringify({\n        id: 99281932,\n        first_name: 'Andrew',\n        last_name: 'Rogue',\n        username: 'rogue',\n        language_code: 'en',\n        is_premium: true,\n        allows_write_to_pm: true,\n      })],\n      ['hash', '89d6079ad6762351f38c6dbbc41bb53048019256a9443988af7a48bcad16ba31'],\n      ['auth_date', '1716922846'],\n      ['start_param', 'debug'],\n      ['chat_type', 'sender'],\n      ['chat_instance', '8428209589180549439'],\n    ]).toString();\n\n    mockTelegramEnv({\n      themeParams: {\n        accentTextColor: '#6ab2f2',\n        bgColor: '#17212b',\n        buttonColor: '#5288c1',\n        buttonTextColor: '#ffffff',\n        destructiveTextColor: '#ec3942',\n        headerBgColor: '#fcb69f',\n        hintColor: '#708499',\n        linkColor: '#6ab3f3',\n        secondaryBgColor: '#232e3c',\n        sectionBgColor: '#17212b',\n        sectionHeaderTextColor: '#6ab3f3',\n        subtitleTextColor: '#708499',\n        textColor: '#f5f5f5',\n      },\n      initData: parseInitData(initDataRaw),\n      initDataRaw,\n      version: '7.2',\n      platform: 'tdesktop',\n    });\n\n    console.log('Mock Telegram environment initialized');\n  }\n};\n\n// Инициализация SDK\ninitializeTelegramSDK();\n\n// Инициализация главной кнопки\nconst [mainBtn] = mainButton();\nmainBtn.setParams({\n  backgroundColor: '#aa1388',\n  text: 'Поделиться очками',\n  isVisible: true,\n  isEnabled: true,\n});\nmainBtn.show();\n\n// Установка обработчика нажатия на главную кнопку\nmainBtn.on('click', () => {\n  try {\n    // Получение текущих очков из localStorage\n    const score = localStorage.getItem('memory-game-score') || 0;\n    shareURL(`Посмотрите! У меня ${score} очков в игре!`);\n    console.log('Окно выбора чата открыто для отправки сообщения.');\n  } catch (error) {\n    console.error('Ошибка при открытии окна выбора чата:', error);\n  }\n});\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}